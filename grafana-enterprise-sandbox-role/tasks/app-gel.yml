---
- set_fact:
    appname: gel

- name: provision storage
  ansible.builtin.include_role:
    name: grafana-enterprise-sandbox-role
    tasks_from: provision-storage

- name: "Manage {{appname}} container state - {{appconfig[appname].appstate}}"
  docker_container:
    name: "{{appname}}"
    hostname: "{{appname}}"
    image: "{{ appconfig[appname].image }}"
    state: "{{ appconfig[appname].appstate }}"
    recreate: "{{ appconfig[appname].recreate }}"
    restart_policy: unless-stopped
    container_default_behavior: no_defaults
    detach: true
    user: "{{ appconfig[appname].exec_as_user }}:{{ appconfig[appname].exec_as_group }}"
    entrypoint: 
    command: -config.file=/cfg/config.yml --target=all
    env:
    ports:
      - 3100:3100
    labels: 
    volumes:
      - "{{ appconfig[appname].config_folder }}:/cfg:ro"
      - "{{ appconfig[appname].data_folder }}:/data:rw"
    networks_cli_compatible: yes
    network_mode: "{{ docker_network_name }}"

- name: Helth check
  when: appconfig[appname].appstate == 'started'
  uri:
    url: "http://{{ inventory_hostname }}:3100/ready"
    method: GET
    status_code: 200
  register: result
  until: result.status == 200
  retries: 100
  delay: 2

- name: Create gem admin token
  shell: |
    if [[ -f "{{ appconfig[appname].data_folder }}/gem-admin-token.txt" ]]; 
    then
      echo "{{ appconfig[appname].data_folder }}/gem-admin-token.txt exists."
    else 
      docker exec {{ appname }} /usr/bin/enterprise-metrics -config.file=/cfg/config.yml --target=tokengen --tokengen.token-file=/data/gem-admin-token.txt
    fi
  args:
    creates: "{{ appconfig[appname].data_folder }}/gem-admin-token.txt"


- name: read the gem admin token
  shell: cat {{ appconfig[appname].data_folder }}/gem-admin-token.txt
  register: gem_admin_token
  changed_when: no

- name: delete storage
  ansible.builtin.include_role:
    name: grafana-enterprise-sandbox-role
    tasks_from: delete-storage